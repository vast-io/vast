config-file: vast.yaml

fixtures:
  BiTopologyTester:
    enter: | # python
      node0 = Server(self.cmd,
                     ['-e', f'127.0.0.1:{VAST_PORT}', '-i', 'node0', 'start'],
                     work_dir, name='node0', port=VAST_PORT,
                     config_file=self.config_file')
      node1 = Server(self.cmd,
                     ['-e', '127.0.0.1:42124',
                      '-i', 'node1', 'start'],
                     work_dir, name='node1', port=42124,
                     config_file=self.config_file)
      cmd += ['-e', f'127.0.0.1:{VAST_PORT}']

    exit: | # python
      node0.stop()
      node1.stop()

  ExampleConfigFileTester:
    enter: | # python
      node = Server(self.cmd,
                    ['-e', f'127.0.0.1:{VAST_PORT}', '-i', 'node', 'start'],
                    work_dir, name='node', port=VAST_PORT,
                    config_file='vast.yaml.example')
      cmd += ['-e', f'127.0.0.1:{VAST_PORT}']

    exit: | # python
      node.stop()

  TransformsTester:
    enter: | # python
      node = Server(self.cmd,
                    ['-e', f'127.0.0.1:{VAST_PORT}', '-i', 'node', 'start'],
                    work_dir, name='node', port=VAST_PORT,
                    config_file='vast-transforms.yaml')
      cmd += ['-e', f'127.0.0.1:{VAST_PORT}']

    exit: | # python
      node.stop()

  ServerTester:
    enter: | # python
      node = Server(self.cmd,
                    ['-e', f'127.0.0.1:{VAST_PORT}', '-i', 'node', 'start'],
                    work_dir, name='node', port=VAST_PORT,
                    config_file=self.config_file)
      cmd += ['-e', f'127.0.0.1:{VAST_PORT}']

    exit: | # python
      node.stop()

  AgingTester:
    enter: | # python
      node = Server(self.cmd,
                    ['-e', f'127.0.0.1:{VAST_PORT}',
                     '-i', 'node',
                     '--aging-frequency=2000min',
                     '--aging-query=:addr == 192.168.1.104',
                     'start'],
                    work_dir, name='node', port=VAST_PORT,
                    config_file=self.config_file)
      cmd += ['-e', f'127.0.0.1:{VAST_PORT}']

    exit: | # python
      node.stop()

  DiskMonitorTester:
    enter: | # python
      node = Server(self.cmd,
                    ['-e', f'127.0.0.1:{VAST_PORT}',
                     '-i', 'node',
                     '--max-partition-size=8462',
                     'start',
                     '--disk-budget-check-interval=2',
                     '--disk-budget-check-binary=' + os.path.dirname(os.path.abspath(__file__)) + '/misc/scripts/count_partitions_plus1.sh',
                     '--disk-budget-high=1',
                     '--disk-budget-low=0'],
                    work_dir, name='node', port=VAST_PORT,
                    config_file='vast-local-stores.yaml')
      cmd += ['-e', f'127.0.0.1:{VAST_PORT}']

    exit: | # python
      node.stop()

tests:
  JSON schema inference:
    tags: [schema, infer, json]
    steps:
      - command: infer
        input: data/json/empty-object.json
      - command: infer
        input: data/json/basic-types.json
      - command: infer
        input: data/json/string-types.json
      - command: infer
        input: data/json/array-types.json
      - command: infer
        input: data/json/nested-object.json
  Conn log counting:
    tags: [node, counting, zeek]
    steps:
      - command: -N --max-partition-size=64 import -b zeek
        input: data/zeek/conn.log.gz
      - command: -N count ":addr == 192.168.1.104"
      - command: -N count -e ":addr == 192.168.1.104"
      - command: -N count "resp_p == 80"
      - command: -N count "resp_p != 80"
      - command: -N count 861237
  Node Zeek conn log:
    tags: [node, import-export, zeek]
    steps:
      - command: -N import zeek
        input: data/zeek/conn.log.gz
      - command: -N export ascii 'resp_h == 192.168.1.104'
      - command: -N export ascii 'orig_bytes > 1k && orig_bytes < 1Ki'
      - command: -N export ascii ':string == "OrfTtuI5G4e" || :port == 67 || :count == 67'
      - command: -N export ascii '#type == "zeek.conn" && resp_h == 192.168.1.104'
      - command: '-N export ascii "#type != \"zeek.conn\" && #type != \"vast.metrics\""'
      - command: -N export ascii '#type != "foobar" && resp_h == 192.168.1.104'
      - command: -N get --format=json 1 42 7777 9999999999 122
        transformation: jq -ec '.'
      - command: -N get --format=csv 99 99 99
  Node Zeek multiple imports:
    tags: [node, import-export, zeek]
    steps:
      - command: -N import zeek
        input: data/zeek/conn.log.gz
      - command: -N import zeek
        input: data/zeek/dns.log.gz
      - command: -N export ascii 'resp_h == 192.168.1.104'
      - command: -N export ascii 'zeek.conn.id.resp_h == 192.168.1.104'
      - command: '-N count ":timestamp >= 1970-01-01 && #type != \"vast.metrics\""'
      - command: -N count '#type == "zeek.conn"'
  Node Zeek dns log:
    tags: [node, import-export, zeek]
    steps:
      - command: -N import zeek
        input: data/zeek/dns.log.gz
      - command: -N export ascii 'resp_h == 192.168.1.104'
      - command: -N export zeek 'resp_h == 192.168.1.104'
        transformation: awk '!/^#(open|close)/'
      - command: -N count ':port == 53'
      - command: '-N count ":count == 53 && #type == \"zeek.dns\""'
  Node Zeek http log:
    tags: [node, import-export, zeek]
    steps:
      - command: -N import zeek
        input: data/zeek/http.log.gz
      - command: -N export ascii 'resp_h == 216.240.189.196'
  Node Zeek snmp log:
    tags: [node, import-export, zeek]
    steps:
      - command: -N import zeek
        input: data/zeek/snmp.log.gz
      - command: -N export ascii 'duration >= 3s'
  Node Zeek JSON:
    tags: [node, import-export, zeek, json]
    steps:
      - command: -N import -b zeek-json
        input: data/zeek/zeek.json
      - command: '-N export json "\"zeek\" in #type"'
        transformation: jq -ec '.'
  Export json:
    tags: [json, zeek]
    steps:
      - command: -N import zeek
        input: data/zeek/conn.log.gz
      - command: -N export json 'resp_h == 192.168.1.104'
        transformation: jq -ec '.'
  Malformed Query:
    tags: [export]
    fixture: ServerTester
    steps:
      - command: export json 'yo that is not a query'
        expected_result: error
      - command: and that is not a command
        expected_result: error
  Export Timeout:
    tags: [server, export]
    fixture: ServerTester
    steps:
      - command: import -b zeek
        input: data/zeek/conn.log.gz
        # We use the `null` export format since timeouts are always racy; we
        # cannot reliably make a 0 second timeout return 0 events.
      - command: export --timeout=0s null 'resp_h == 192.168.1.104'
        expected_result: error
      - command: export --continuous --timeout=0s null 'resp_h == 192.168.1.104'
        expected_result: error
  Server Zeek conn log:
    tags: [server, import-export, zeek]
    fixture: ServerTester
    steps:
      - command: import -b zeek
        input: data/zeek/conn.log.gz
      - command: export ascii 'resp_h == 192.168.1.104'
      # import some more to make sure accounting data is in the system.
      - command: import -b --batch-size=10 zeek
        input: data/zeek/conn.log.gz
      - command: import -b --batch-size=1000 zeek
        input: data/zeek/conn.log.gz
      - command: import -b --batch-size=100000 zeek
        input: data/zeek/conn.log.gz
      - command: import -b --batch-size=1 -n 242 zeek
        input: data/zeek/conn.log.gz
      - command: status --detailed
        transformation: jq '.index.statistics.layouts | del(."vast.metrics")'
  Server Zeek multiple imports:
    tags: [server, import-export, zeek]
    fixture: ServerTester
    steps:
      - command: import -b zeek
        input: data/zeek/conn.log.gz
      - command: import -b zeek
        input: data/zeek/dns.log.gz
      - command: export ascii 'resp_h == 192.168.1.104'
      - command: export ascii 'zeek.conn.id.resp_h == 192.168.1.104'
      - command: 'count ":timestamp >= 1970-01-01 && #type != \"vast.metrics\""'
      - command: count '#type == "zeek.conn"'
  Table Slice Types:
    tags: [server, import-export, batch-encoding, zeek]
    fixture: ServerTester
    steps:
      - command: import -b zeek
        input: data/zeek/conn.log.gz
      - command: import -b --batch-encoding=msgpack zeek
        input: data/zeek/conn.log.gz
      - command: count '#type == "zeek.conn"'
      - guard: version | jq -e '."Apache Arrow"'
      - command: import -b --batch-encoding=arrow zeek
        input: data/zeek/conn.log.gz
      - command: count '#type == "zeek.conn"'
  Query Operators:
    tags: [server, operator]
    fixture: ServerTester
    steps:
      - command: import -b zeek
        input: data/zeek/conn.log.gz
      - command: export ascii 'conn.duration <= 1.0s'
      - command: export json 'duration >= 10.0s && duration < 15s'
      - command: export json --numeric-durations 'duration >= 1.8s && duration < 2.0s'
      - command: export ascii 'service  == "smtp"'
      - command: export ascii 'missed_bytes  != 0'
      - command: export ascii 'id.orig_h !in 192.168.1.0/24'
      - command: export ascii 'id.orig_h in fe80:5074:1b53:7e7::/64'
      - command: export ascii 'id.orig_h ni fe80:5074:1b53:7e7::/64'
  Expressions:
    tags: [server, expression]
    fixture: ServerTester
    steps:
      - command: import -b zeek
        input: data/zeek/conn.log.gz
      - command: export ascii 'fe80::5074:1b53:7e7:ad4d || 169.254.225.22'
      - command: export ascii '"OrfTtuI5G4e" || fe80::5074:1b53:7e7:ad4d'
  Node Type Query:
    tags: [node, type, ch6104]
    steps:
      - command: -N import -n 20 zeek
        input: data/zeek/conn.log.gz
      - command: -N export ascii '#type == "zeek.conn"'
  Type Query:
    tags: [server, type, ch5404]
    fixture: ServerTester
    steps:
      - command: import -b -n 20 zeek
        input: data/zeek/conn.log.gz
      - command: export ascii '#type == "zeek.conn"'
  Node json zeek conn:
    tags: [node, import-export, zeek, json]
    steps:
      - command: -N import -s @./misc/schema/zeek-conn.schema -t zeek.conn.custom json
        input: data/json/conn.log.json.gz
      - command: -N export ascii 'duration > 6s'
      - command: -N export ascii ':timestamp >= 2011-08-15T03:48'
      - command: -N export ascii ':time >= 2011-08-15T03:48'
  Node suricata alert:
    tags: [node, import-export, suricata, eve, import-filter]
    steps:
      - command: -N import suricata '#type != "suricata.stats"'
        input: data/suricata/eve.json
      - command: -N export ascii 'src_ip == 147.32.84.165'
      - command: -N export csv '#type ~ /suricata.*/'
      - command: -N export zeek '#type ~ /suricata.alert/'

  Node argus csv:
    tags: [node, import-export, argus, csv]
    steps:
      - command: -N import -t argus.record csv
        input: data/csv/argus-M57-10k-pkts.csv.gz
      - command: -N export ascii 'State != "CON" && Dur > 4900ms'
      - command: -N export ascii 'Cause == "Status" && Dur > 1s'

  Manual 2:
    tags: [examples, disabled]
    fixture: BiTopologyTester
    steps:
      - command: peer 'localhost:42124'
      - command: status

  Multi addr query:
    tags: [import-export, zeek]
    steps:
      - command: -N import zeek
        input: data/zeek/conn.log.gz
      - command: -N export ascii
        input: queries/multi_addr.txt

  Pivot:
    tags: [node, pivot]
    steps:
      - command: -N import suricata
        input: data/pcap/suricata/eve.json.gz
      - command: -N import zeek
        input: data/pcap/zeek/conn.log.gz
      - command: -N import zeek
        input: data/pcap/zeek/files.log.gz
      - command: -N import zeek
        input: data/pcap/zeek/http.log.gz
      - command: -N import zeek
        input: data/pcap/zeek/packet_filter.log.gz
      - command: -N import zeek
        input: data/pcap/zeek/ssh.log.gz
      - command: -N pivot --format=zeek zeek.conn '#type ~ /suricata.*/ && dest_ip == 72.247.178.18'
        transformation: awk '!/^#(open|close)/'
      - command: -N pivot zeek.conn '#type ~ /zeek.http/ && method == "GET"'
        transformation: awk '!/^#(open|close)/'

  Taxonomy queries:
    tags: [concepts, models]
    fixture: ServerTester
    steps:
      - command: import -b zeek
        input: data/pcap/zeek/conn.log.gz
      - command: import -b suricata
        input: data/pcap/suricata/eve.json.gz
      - command: count "net.src.ip == 192.168.168.100"
      - command: count "net.connection == <192.168.168.100, _, 72.247.178.18, _, _>"
      # We omit the whitespace after the colon on purpose, otherwise pyyaml
      # thinks this is a key-value pair.
      - command: count 'net.connection == <net.src.ip:192.168.168.100, net.dst.port:80>'
      - command: count 'net.connection != <net.src.ip:192.168.168.100, net.dst.port:80>'
      - command: count "net.connection == <_, _, _, _, _>"
      - command: count "net.connection == <_, _, _, 80, _>"
      - command: count "net.connection != <_, _, _, 80, _>"

  Taxonomy dump:
    tags: [concepts, models]
    fixture: ServerTester
    steps:
      - command: dump concepts
        transformation: jq '.[] | select(.concept.name == "net.app") | .concept.fields | map(split(".")[0]) | unique'
      - command: dump --yaml models
  Arrow:
    condition: version | jq -e '."Apache Arrow"'
    tags: [export, arrow]
    steps:
      - command: -N import zeek
        input: data/zeek/conn.log.gz
      - command: -N export -n 10 arrow '#type == "zeek.conn"'
        transformation: python @./misc/scripts/print-arrow.py
      - command: -N import suricata
        input: data/suricata/eve.json
      - command: -N export arrow '#type == "suricata.http"'
        transformation: python @./misc/scripts/print-arrow.py
  Import syslog:
    tags: [syslog, import]
    steps:
      - command: -N import syslog
        input: data/syslog/syslog.log
      - command: -N export ascii '#type == /syslog.*/'
  Explore Zeek:
    tags: [explore, zeek]
    fixture: ServerTester
    steps:
      - command: import -b zeek
        input: data/zeek/conn.log.gz
      - command: explore --after=3min 'uid == "Yaix3QBP3Xg"'
      - command: explore --format=ascii --after=3min 'uid == "Yaix3QBP3Xg"'
  # The first queries are stress tests for the deduplication: The query
  # selects every event, and the huge timebox ensures that every event
  # is included in the context of every other event.
  Explore Suricata With Overlap:
    tags: [explore, suricata]
    steps:
      - command: -N import suricata
        input: data/suricata/eve.json
      - command: -N explore --before=10years --after=10years '#type == /suricata.*/'
      - command: -N explore --max-events=3 --before=10years --after=10years '#type == /suricata.*/'
        transformation: wc -l | tr -d ' '
      - command: -N explore --max-events-query=1 --before=10years --after=10years '#type == /suricata.*/'
        transformation: wc -l | tr -d ' '
      - command: -N explore --max-events-query=3 --before=0s --after=1ns '#type == /suricata.*/'
        transformation: wc -l | tr -d ' '
      - command: -N explore --max-events-query=1 --max-events-context=2 --before=10years --after=10years '#type == /suricata.*/'
        transformation: wc -l | tr -d ' '
  # TODO(ch15579): Re-enable this test once the slow zeek export is fixed.
  # Explore Zeek With Overlap:
  #   tags: [explore, zeek]
  #   steps:
  #     - command: -N import zeek
  #       input: data/zeek/conn.log.gz
  #     - command: -N explore --before=10000h --after=10000h '#type == /zeek.*/'
  Explore Zeek By Field:
    tags: [explore, zeek]
    steps:
      - command: -N import zeek
        input: data/zeek/conn.log.gz
      - command: -N import zeek
        input: data/zeek/dns.log.gz
      - command: -N explore --by='id.orig_h' --after=1s --before=0s 'zeek.dns.query == "survey.112.2o7.net"'
  Heterogenous JSONL import:
    tags: [import, json, sysmon]
    steps:
      - command: -N import json
        input: data/json/sysmon.json
      - command: -N status --detailed
        transformation: jq '.index.statistics.layouts | del(."vast.metrics")'
      - command: -N import suricata
        input: data/suricata/eve.json
      - command: -N export json '"®" in :string'
        transformation: jq -ec '.'
      - command: -N export json '#type ni "suricata"'
        transformation: jq -ec '.'

  # Nesting Records in Lists is not currently fully supported, but its presence
  # should also not crash the JSON reader.
  Nested Records:
    tags: [import, json]
    steps:
      - guard: version | jq -e '."Apache Arrow"'
      - command: '-N import --schema="type custom = record { a: list<record { b: string, c: count, }>, d: count, }" --type=custom --batch-encoding=arrow json'
        input: data/json/record-in-list.json
      - command: -N export ascii '#type == "custom"'

  Zeek conn log aging:
    tags: [import-export, aging, zeek]
    fixture: AgingTester
    steps:
      - command: import -b zeek
        input: data/zeek/conn.log.gz
      - command: export ascii 'resp_h == 192.168.1.104'
      - command: send eraser run
      - command: export ascii 'resp_h == 192.168.1.104'
  Spawn source:
    tags: [import, spawn-source, zeek]
    fixture: ServerTester
    steps:
      - command: spawn source -r @./data/suricata/eve.json suricata
      - command: import -b zeek
        input: data/zeek/conn.log.gz
      - command: count '#type ~ /suricata.*/'
  Example config file:
    tags: [import-export, zeek]
    fixture: ExampleConfigFileTester
    config-file: vast.yaml.example
    steps:
      - command: import -b zeek
        input: data/zeek/conn.log.gz
      - command: export ascii 'net.app !in ["dns", "ftp", "http", "ssl"]'
  # The `DiskMonitorTester` is set up to run every second and to delete all
  # partitions on disk. We first import the complete zeek dataset with 8462
  # events, then some additional suricata events to force the previous slice
  # to be written on disk and then give the disk monitor enough time to run.
  # After that, all events from the first import should have been erased.
  Disk monitor:
    tags: [disk-quota]
    fixture: DiskMonitorTester
    steps:
      - command: import zeek
        input: data/zeek/conn.log.gz
      - command: import suricata
        input: data/suricata/eve.json
        transformation: sleep 4
      - command: count '#type == /zeek.*/'
  # This test only checks whether it is possible to take a Sigma rule as valid
  # input and perform a simple query. It does not check for subtleties in the
  # expression language itself. See the corresponding unit tests for that.
  Sigma:
    tags: [server, import-export, sigma, zeek]
    fixture: ServerTester
    steps:
      - command: import -b zeek
        input: data/zeek/conn.log.gz
      - command: export json
        input: data/sigma/zeek-conn.yaml
  Transforms:
    tags: [server, client, import-export, transforms, suricata]
    fixture: TransformsTester
    steps:
      - command: --config=@./vast-transforms.yaml import suricata
        input: data/suricata/eve.json
      - command: export json '#type == "suricata.http"'
      - command: export json '#type == "suricata.netflow"'
      - command: export json '#type == "suricata.dns"'
      - command: export json '#type == "suricata.fileinfo"'
      - command: export json '#type == "suricata.alert"'
  # The output of the 'hash' step currently depends on whether or
  # not we apply arrow transforms on arrow table slices, so we only
  # enable it on builds that have arrow enabled.
  Transforms Requiring Arrow:
    condition: version | jq -e '."Apache Arrow"'
    tags: [server, client, import-export, transforms, suricata]
    fixture: TransformsTester
    steps:
      - command: --config=@./vast-transforms.yaml import suricata
        input: data/suricata/eve.json
      - command: --config=@./vast-transforms.yaml export json '#type == "suricata.fileinfo"'
  Partition-local Stores:
    tags: [server, import-export, suricata]
    steps:
      - command: -N --config=@./vast-local-stores.yaml import suricata
        input: data/suricata/eve.json
      - command: -N export json '#type ni ""'


